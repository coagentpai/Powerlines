/*
This file was automatically generated at {{.TimeStr}}
*/
#include <stdint.h>
#include <string>

#include <msgpack.hpp>

const std::string EEContainerVersion = "{{ .Version }}";

// ContainerIds of all request containers
{{ range $key, $value := .RequestAliases }}const uint16_t EE{{ $value.Short }}Id = {{ $key }};
{{ end }}

// ContainerIds of all response containers
{{ range $key, $value := .ResponseAliases }}const uint16_t EE{{ $value.Short }}Id = {{ $key }};
{{ end }}

class EEContainer {
      public:
        EEContainer(uint16_t containerId) : containerId(containerId){};
      protected:
        uint16_t containerId;
};

//Class for each frame type{{ range $container := .ReflectedStructs}}
class EE{{$container.Name}}Container : EEContainer {
public:
{{ range $container.Fields}}    {{.Type}} {{.Name}};
{{end}}    MSGPACK_DEFINE({{ range $index, $field := $container.Fields}}{{if $index}},{{end}}{{$field.Name}}{{end}});
    EE{{$container.Name}}Container({{ range $index, $field := $container.Fields}}{{if $index}},{{end}}{{$field.Type}}{{end}}) : EEContainer(EE{{ $container.Name }}Id), {{ range $index, $field := $container.Fields}}{{if $index}}, {{end}}{{$field.Name}}({{$field.Name}}){{end}}{};
    EE{{$container.Name}}Container() : EEContainer(EE{{ $container.Name }}Id){};
};
{{end}}

{{ range $container := .ReflectedStructs}}{{ if $container.IsResponse }}
static EEContainer *decodeContainerAs{{$container.Name}}(msgpack::object *obj) {
     EE{{$container.Name}}Container *containerPtr = new EE{{$container.Name}}Container();
     (*obj).convert(containerPtr);
     return (EEContainer *)containerPtr;
}
{{end}}{{end}}

EEContainer *decodeFrame(uint16_t containerId, msgpack::sbuffer *buf) {
     msgpack::unpacked msg;
     msgpack::unpack(&msg, buf->data(), buf->size());

     msgpack::object obj = msg.get();
     switch(containerId) {
     {{ range $container := .ReflectedStructs}}{{ if $container.IsResponse }}
     case EE{{$container.Name}}Id:
          return decodeContainerAs{{$container.Name}}(&obj);
     {{end}}{{end}}
     }
     return NULL;
}
